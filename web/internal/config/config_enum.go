// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package config

import (
	"errors"
	"fmt"
)

const (
	// SearchModeScore is a SearchMode of type score.
	SearchModeScore SearchMode = "score"
	// SearchModeThreshold is a SearchMode of type threshold.
	SearchModeThreshold SearchMode = "threshold"
)

var ErrInvalidSearchMode = errors.New("not a valid SearchMode")

// String implements the Stringer interface.
func (x SearchMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SearchMode) IsValid() bool {
	_, err := ParseSearchMode(string(x))
	return err == nil
}

var _SearchModeValue = map[string]SearchMode{
	"score":     SearchModeScore,
	"threshold": SearchModeThreshold,
}

// ParseSearchMode attempts to convert a string to a SearchMode.
func ParseSearchMode(name string) (SearchMode, error) {
	if x, ok := _SearchModeValue[name]; ok {
		return x, nil
	}
	return SearchMode(""), fmt.Errorf("%s is %w", name, ErrInvalidSearchMode)
}

// MarshalText implements the text marshaller method.
func (x SearchMode) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SearchMode) UnmarshalText(text []byte) error {
	tmp, err := ParseSearchMode(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

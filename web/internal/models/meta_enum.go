// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// MfaSessionTypeEmail is a MfaSessionType of type email.
	MfaSessionTypeEmail MfaSessionType = "email"
	// MfaSessionTypeTotp is a MfaSessionType of type totp.
	MfaSessionTypeTotp MfaSessionType = "totp"
	// MfaSessionTypeTotpEnrollment is a MfaSessionType of type totp_enrollment.
	MfaSessionTypeTotpEnrollment MfaSessionType = "totp_enrollment"
)

var ErrInvalidMfaSessionType = errors.New("not a valid MfaSessionType")

// String implements the Stringer interface.
func (x MfaSessionType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MfaSessionType) IsValid() bool {
	_, err := ParseMfaSessionType(string(x))
	return err == nil
}

var _MfaSessionTypeValue = map[string]MfaSessionType{
	"email":           MfaSessionTypeEmail,
	"totp":            MfaSessionTypeTotp,
	"totp_enrollment": MfaSessionTypeTotpEnrollment,
}

// ParseMfaSessionType attempts to convert a string to a MfaSessionType.
func ParseMfaSessionType(name string) (MfaSessionType, error) {
	if x, ok := _MfaSessionTypeValue[name]; ok {
		return x, nil
	}
	return MfaSessionType(""), fmt.Errorf("%s is %w", name, ErrInvalidMfaSessionType)
}

// MarshalText implements the text marshaller method.
func (x MfaSessionType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MfaSessionType) UnmarshalText(text []byte) error {
	tmp, err := ParseMfaSessionType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package boundhost

import (
	"errors"
	"fmt"
)

const (
	// FnLogDebug is a Fn of type log_debug.
	FnLogDebug Fn = "log_debug"
	// FnLogError is a Fn of type log_error.
	FnLogError Fn = "log_error"
	// FnLogWarn is a Fn of type log_warn.
	FnLogWarn Fn = "log_warn"
	// FnTransformUrlToMarkdown is a Fn of type transform_url_to_markdown.
	FnTransformUrlToMarkdown Fn = "transform_url_to_markdown"
	// FnTransformHtmlToMarkdown is a Fn of type transform_html_to_markdown.
	FnTransformHtmlToMarkdown Fn = "transform_html_to_markdown"
	// FnChunkWithOverlap is a Fn of type chunk_with_overlap.
	FnChunkWithOverlap Fn = "chunk_with_overlap"
	// FnChunkBySentence is a Fn of type chunk_by_sentence.
	FnChunkBySentence Fn = "chunk_by_sentence"
	// FnNetworkRequest is a Fn of type network_request.
	FnNetworkRequest Fn = "network_request"
	// FnEntryUpdate is a Fn of type entry_update.
	FnEntryUpdate Fn = "entry_update"
	// FnEntryCreateChunks is a Fn of type entry_create_chunks.
	FnEntryCreateChunks Fn = "entry_create_chunks"
	// FnStoreSet is a Fn of type store_set.
	FnStoreSet Fn = "store_set"
	// FnStoreGet is a Fn of type store_get.
	FnStoreGet Fn = "store_get"
	// FnStoreAll is a Fn of type store_all.
	FnStoreAll Fn = "store_all"
	// FnStoreDelete is a Fn of type store_delete.
	FnStoreDelete Fn = "store_delete"
	// FnStoreClear is a Fn of type store_clear.
	FnStoreClear Fn = "store_clear"
	// FnCryptoRand is a Fn of type crypto_rand.
	FnCryptoRand Fn = "crypto_rand"
)

var ErrInvalidFn = errors.New("not a valid Fn")

// String implements the Stringer interface.
func (x Fn) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Fn) IsValid() bool {
	_, err := ParseFn(string(x))
	return err == nil
}

var _FnValue = map[string]Fn{
	"log_debug":                  FnLogDebug,
	"log_error":                  FnLogError,
	"log_warn":                   FnLogWarn,
	"transform_url_to_markdown":  FnTransformUrlToMarkdown,
	"transform_html_to_markdown": FnTransformHtmlToMarkdown,
	"chunk_with_overlap":         FnChunkWithOverlap,
	"chunk_by_sentence":          FnChunkBySentence,
	"network_request":            FnNetworkRequest,
	"entry_update":               FnEntryUpdate,
	"entry_create_chunks":        FnEntryCreateChunks,
	"store_set":                  FnStoreSet,
	"store_get":                  FnStoreGet,
	"store_all":                  FnStoreAll,
	"store_delete":               FnStoreDelete,
	"store_clear":                FnStoreClear,
	"crypto_rand":                FnCryptoRand,
}

// ParseFn attempts to convert a string to a Fn.
func ParseFn(name string) (Fn, error) {
	if x, ok := _FnValue[name]; ok {
		return x, nil
	}
	return Fn(""), fmt.Errorf("%s is %w", name, ErrInvalidFn)
}

// MarshalText implements the text marshaller method.
func (x Fn) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Fn) UnmarshalText(text []byte) error {
	tmp, err := ParseFn(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

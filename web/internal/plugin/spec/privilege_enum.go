// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package spec

import (
	"errors"
	"fmt"
)

const (
	// PermNoop is a Perm of type noop.
	PermNoop Perm = "noop"
	// PermLogDebug is a Perm of type log::debug.
	PermLogDebug Perm = "log::debug"
	// PermLogError is a Perm of type log::error.
	PermLogError Perm = "log::error"
	// PermLogWarn is a Perm of type log::warn.
	PermLogWarn Perm = "log::warn"
	// PermEntriesUpdate is a Perm of type entries::update.
	PermEntriesUpdate Perm = "entries::update"
	// PermChunksCreate is a Perm of type chunks::create.
	PermChunksCreate Perm = "chunks::create"
	// PermNetworkRequest is a Perm of type network::request.
	PermNetworkRequest Perm = "network::request"
	// PermTransformChunkWithOverlap is a Perm of type transform::chunk_with_overlap.
	PermTransformChunkWithOverlap Perm = "transform::chunk_with_overlap"
	// PermTransformChunkBySentence is a Perm of type transform::chunk_by_sentence.
	PermTransformChunkBySentence Perm = "transform::chunk_by_sentence"
	// PermTransformUrlToMarkdown is a Perm of type transform::url_to_markdown.
	PermTransformUrlToMarkdown Perm = "transform::url_to_markdown"
	// PermTransformHtmlToMarkdown is a Perm of type transform::html_to_markdown.
	PermTransformHtmlToMarkdown Perm = "transform::html_to_markdown"
	// PermStoreGet is a Perm of type store::get.
	PermStoreGet Perm = "store::get"
	// PermStoreSet is a Perm of type store::set.
	PermStoreSet Perm = "store::set"
	// PermStoreDelete is a Perm of type store::delete.
	PermStoreDelete Perm = "store::delete"
	// PermStoreAll is a Perm of type store::all.
	PermStoreAll Perm = "store::all"
	// PermStoreClear is a Perm of type store::clear.
	PermStoreClear Perm = "store::clear"
	// PermCryptoRand is a Perm of type crypto::rand.
	PermCryptoRand Perm = "crypto::rand"
)

var ErrInvalidPerm = errors.New("not a valid Perm")

// String implements the Stringer interface.
func (x Perm) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Perm) IsValid() bool {
	_, err := ParsePerm(string(x))
	return err == nil
}

var _PermValue = map[string]Perm{
	"noop":                          PermNoop,
	"log::debug":                    PermLogDebug,
	"log::error":                    PermLogError,
	"log::warn":                     PermLogWarn,
	"entries::update":               PermEntriesUpdate,
	"chunks::create":                PermChunksCreate,
	"network::request":              PermNetworkRequest,
	"transform::chunk_with_overlap": PermTransformChunkWithOverlap,
	"transform::chunk_by_sentence":  PermTransformChunkBySentence,
	"transform::url_to_markdown":    PermTransformUrlToMarkdown,
	"transform::html_to_markdown":   PermTransformHtmlToMarkdown,
	"store::get":                    PermStoreGet,
	"store::set":                    PermStoreSet,
	"store::delete":                 PermStoreDelete,
	"store::all":                    PermStoreAll,
	"store::clear":                  PermStoreClear,
	"crypto::rand":                  PermCryptoRand,
}

// ParsePerm attempts to convert a string to a Perm.
func ParsePerm(name string) (Perm, error) {
	if x, ok := _PermValue[name]; ok {
		return x, nil
	}
	return Perm(""), fmt.Errorf("%s is %w", name, ErrInvalidPerm)
}

// MarshalText implements the text marshaller method.
func (x Perm) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Perm) UnmarshalText(text []byte) error {
	tmp, err := ParsePerm(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

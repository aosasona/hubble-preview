// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package spec

import (
	"errors"
	"fmt"
)

const (
	// AuthMethodSsh is a AuthMethod of type ssh.
	AuthMethodSsh AuthMethod = "ssh"
	// AuthMethodBasicAuth is a AuthMethod of type basic_auth.
	AuthMethodBasicAuth AuthMethod = "basic_auth"
	// AuthMethodNone is a AuthMethod of type none.
	AuthMethodNone AuthMethod = "none"
)

var ErrInvalidAuthMethod = errors.New("not a valid AuthMethod")

// String implements the Stringer interface.
func (x AuthMethod) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AuthMethod) IsValid() bool {
	_, err := ParseAuthMethod(string(x))
	return err == nil
}

var _AuthMethodValue = map[string]AuthMethod{
	"ssh":        AuthMethodSsh,
	"basic_auth": AuthMethodBasicAuth,
	"none":       AuthMethodNone,
}

// ParseAuthMethod attempts to convert a string to a AuthMethod.
func ParseAuthMethod(name string) (AuthMethod, error) {
	if x, ok := _AuthMethodValue[name]; ok {
		return x, nil
	}
	return AuthMethod(""), fmt.Errorf("%s is %w", name, ErrInvalidAuthMethod)
}

// MarshalText implements the text marshaller method.
func (x AuthMethod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AuthMethod) UnmarshalText(text []byte) error {
	tmp, err := ParseAuthMethod(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// ProtocolHttp is a Protocol of type http.
	ProtocolHttp Protocol = "http"
	// ProtocolHttps is a Protocol of type https.
	ProtocolHttps Protocol = "https"
	// ProtocolGit is a Protocol of type git.
	ProtocolGit Protocol = "git"
	// ProtocolSsh is a Protocol of type ssh.
	ProtocolSsh Protocol = "ssh"
)

var ErrInvalidProtocol = errors.New("not a valid Protocol")

// String implements the Stringer interface.
func (x Protocol) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Protocol) IsValid() bool {
	_, err := ParseProtocol(string(x))
	return err == nil
}

var _ProtocolValue = map[string]Protocol{
	"http":  ProtocolHttp,
	"https": ProtocolHttps,
	"git":   ProtocolGit,
	"ssh":   ProtocolSsh,
}

// ParseProtocol attempts to convert a string to a Protocol.
func ParseProtocol(name string) (Protocol, error) {
	if x, ok := _ProtocolValue[name]; ok {
		return x, nil
	}
	return Protocol(""), fmt.Errorf("%s is %w", name, ErrInvalidProtocol)
}

// MarshalText implements the text marshaller method.
func (x Protocol) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Protocol) UnmarshalText(text []byte) error {
	tmp, err := ParseProtocol(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package spec

import (
	"errors"
	"fmt"
)

const (
	// VersioningStrategyCommit is a VersioningStrategy of type commit.
	VersioningStrategyCommit VersioningStrategy = "commit"
	// VersioningStrategyTag is a VersioningStrategy of type tag.
	VersioningStrategyTag VersioningStrategy = "tag"
)

var ErrInvalidVersioningStrategy = errors.New("not a valid VersioningStrategy")

// String implements the Stringer interface.
func (x VersioningStrategy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VersioningStrategy) IsValid() bool {
	_, err := ParseVersioningStrategy(string(x))
	return err == nil
}

var _VersioningStrategyValue = map[string]VersioningStrategy{
	"commit": VersioningStrategyCommit,
	"tag":    VersioningStrategyTag,
}

// ParseVersioningStrategy attempts to convert a string to a VersioningStrategy.
func ParseVersioningStrategy(name string) (VersioningStrategy, error) {
	if x, ok := _VersioningStrategyValue[name]; ok {
		return x, nil
	}
	return VersioningStrategy(""), fmt.Errorf("%s is %w", name, ErrInvalidVersioningStrategy)
}

// MarshalText implements the text marshaller method.
func (x VersioningStrategy) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *VersioningStrategy) UnmarshalText(text []byte) error {
	tmp, err := ParseVersioningStrategy(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

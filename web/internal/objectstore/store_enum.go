// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package objectstore

import (
	"errors"
	"fmt"
)

const (
	// BucketEntries is a Bucket of type entries.
	BucketEntries Bucket = "entries"
)

var ErrInvalidBucket = errors.New("not a valid Bucket")

// String implements the Stringer interface.
func (x Bucket) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Bucket) IsValid() bool {
	_, err := ParseBucket(string(x))
	return err == nil
}

var _BucketValue = map[string]Bucket{
	"entries": BucketEntries,
}

// ParseBucket attempts to convert a string to a Bucket.
func ParseBucket(name string) (Bucket, error) {
	if x, ok := _BucketValue[name]; ok {
		return x, nil
	}
	return Bucket(""), fmt.Errorf("%s is %w", name, ErrInvalidBucket)
}

// MarshalText implements the text marshaller method.
func (x Bucket) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Bucket) UnmarshalText(text []byte) error {
	tmp, err := ParseBucket(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

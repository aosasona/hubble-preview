// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package templates

import (
	"errors"
	"fmt"
)

const (
	// TemplateConfirmEmail is a Template of type Confirm_email.
	TemplateConfirmEmail Template = iota
	// TemplateResetPassword is a Template of type Reset_password.
	TemplateResetPassword
	// TemplateChangePassword is a Template of type Change_password.
	TemplateChangePassword
	// TemplateEmailMfa is a Template of type Email_mfa.
	TemplateEmailMfa
	// TemplateChangeEmail is a Template of type Change_email.
	TemplateChangeEmail
	// TemplateInviteUserToWorkspace is a Template of type Invite_user_to_workspace.
	TemplateInviteUserToWorkspace
)

var ErrInvalidTemplate = errors.New("not a valid Template")

const _TemplateName = "confirm_emailreset_passwordchange_passwordemail_mfachange_emailinvite_user_to_workspace"

var _TemplateMap = map[Template]string{
	TemplateConfirmEmail:          _TemplateName[0:13],
	TemplateResetPassword:         _TemplateName[13:27],
	TemplateChangePassword:        _TemplateName[27:42],
	TemplateEmailMfa:              _TemplateName[42:51],
	TemplateChangeEmail:           _TemplateName[51:63],
	TemplateInviteUserToWorkspace: _TemplateName[63:87],
}

// String implements the Stringer interface.
func (x Template) String() string {
	if str, ok := _TemplateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Template(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Template) IsValid() bool {
	_, ok := _TemplateMap[x]
	return ok
}

var _TemplateValue = map[string]Template{
	_TemplateName[0:13]:  TemplateConfirmEmail,
	_TemplateName[13:27]: TemplateResetPassword,
	_TemplateName[27:42]: TemplateChangePassword,
	_TemplateName[42:51]: TemplateEmailMfa,
	_TemplateName[51:63]: TemplateChangeEmail,
	_TemplateName[63:87]: TemplateInviteUserToWorkspace,
}

// ParseTemplate attempts to convert a string to a Template.
func ParseTemplate(name string) (Template, error) {
	if x, ok := _TemplateValue[name]; ok {
		return x, nil
	}
	return Template(0), fmt.Errorf("%s is %w", name, ErrInvalidTemplate)
}

// MarshalText implements the text marshaller method.
func (x Template) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Template) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTemplate(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package job

import (
	"errors"
	"fmt"
)

const (
	// JobTypeEntry is a JobType of type entry.
	JobTypeEntry JobType = "entry"
	// JobTypeChunkEmbedding is a JobType of type chunk_embedding.
	JobTypeChunkEmbedding JobType = "chunk_embedding"
	// JobTypeEntryChunkEmbedding is a JobType of type entry_chunk_embedding.
	JobTypeEntryChunkEmbedding JobType = "entry_chunk_embedding"
)

var ErrInvalidJobType = errors.New("not a valid JobType")

// String implements the Stringer interface.
func (x JobType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x JobType) IsValid() bool {
	_, err := ParseJobType(string(x))
	return err == nil
}

var _JobTypeValue = map[string]JobType{
	"entry":                 JobTypeEntry,
	"chunk_embedding":       JobTypeChunkEmbedding,
	"entry_chunk_embedding": JobTypeEntryChunkEmbedding,
}

// ParseJobType attempts to convert a string to a JobType.
func ParseJobType(name string) (JobType, error) {
	if x, ok := _JobTypeValue[name]; ok {
		return x, nil
	}
	return JobType(""), fmt.Errorf("%s is %w", name, ErrInvalidJobType)
}

// MarshalText implements the text marshaller method.
func (x JobType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *JobType) UnmarshalText(text []byte) error {
	tmp, err := ParseJobType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

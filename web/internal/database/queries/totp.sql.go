// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: totp.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTotpSecret = `-- name: CreateTotpSecret :one
insert into totp_secrets (account_id, hash, version) values ($1, $2, $3) returning id, account_id, hash, version, created_at, updated_at
`

type CreateTotpSecretParams struct {
	AccountID pgtype.UUID `json:"account_id"`
	Hash      []byte      `json:"hash"`
	Version   int16       `json:"version"`
}

func (q *Queries) CreateTotpSecret(ctx context.Context, arg CreateTotpSecretParams) (TotpSecret, error) {
	row := q.db.QueryRow(ctx, createTotpSecret, arg.AccountID, arg.Hash, arg.Version)
	var i TotpSecret
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Hash,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTotpSecret = `-- name: DeleteTotpSecret :exec
delete from totp_secrets
where id = $1 and account_id = $2
`

type DeleteTotpSecretParams struct {
	ID        int32       `json:"id"`
	AccountID pgtype.UUID `json:"account_id"`
}

func (q *Queries) DeleteTotpSecret(ctx context.Context, arg DeleteTotpSecretParams) error {
	_, err := q.db.Exec(ctx, deleteTotpSecret, arg.ID, arg.AccountID)
	return err
}

const findOutdatedTotpHashes = `-- name: FindOutdatedTotpHashes :many
select id, account_id, hash, version
from totp_secrets
where version < $1::int
`

type FindOutdatedTotpHashesRow struct {
	ID        int32       `json:"id"`
	AccountID pgtype.UUID `json:"account_id"`
	Hash      []byte      `json:"hash"`
	Version   int16       `json:"version"`
}

func (q *Queries) FindOutdatedTotpHashes(ctx context.Context, maxVersion int32) ([]FindOutdatedTotpHashesRow, error) {
	rows, err := q.db.Query(ctx, findOutdatedTotpHashes, maxVersion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindOutdatedTotpHashesRow{}
	for rows.Next() {
		var i FindOutdatedTotpHashesRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Hash,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTotpSecretByAccountId = `-- name: FindTotpSecretByAccountId :one
select id, account_id, hash, version
from totp_secrets
where account_id = $1
`

type FindTotpSecretByAccountIdRow struct {
	ID        int32       `json:"id"`
	AccountID pgtype.UUID `json:"account_id"`
	Hash      []byte      `json:"hash"`
	Version   int16       `json:"version"`
}

func (q *Queries) FindTotpSecretByAccountId(ctx context.Context, accountID pgtype.UUID) (FindTotpSecretByAccountIdRow, error) {
	row := q.db.QueryRow(ctx, findTotpSecretByAccountId, accountID)
	var i FindTotpSecretByAccountIdRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Hash,
		&i.Version,
	)
	return i, err
}

const updateTotpHash = `-- name: UpdateTotpHash :exec
update totp_secrets
set hash = $1, version = $2
where id = $3 and version < $2
`

type UpdateTotpHashParams struct {
	Hash    []byte `json:"hash"`
	Version int16  `json:"version"`
	ID      int32  `json:"id"`
}

// Update the hash and version of the TOTP secret only if the version if lesser than
// the new version (to prevent redundant updates)
func (q *Queries) UpdateTotpHash(ctx context.Context, arg UpdateTotpHashParams) error {
	_, err := q.db.Exec(ctx, updateTotpHash, arg.Hash, arg.Version, arg.ID)
	return err
}

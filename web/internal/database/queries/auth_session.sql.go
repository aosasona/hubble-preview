// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth_session.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
insert into auth_sessions (user_id, token, expires_at) values ($1, $2, $3) returning id, user_id, token, meta, issued_at, expires_at
`

type CreateSessionParams struct {
	UserID    int32              `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (AuthSession, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i AuthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Meta,
		&i.IssuedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const findValidSessionByToken = `-- name: FindValidSessionByToken :one
select id, user_id, token, meta, issued_at, expires_at
from auth_sessions
where token = $1 and expires_at > now() + interval '1 second'
`

func (q *Queries) FindValidSessionByToken(ctx context.Context, token string) (AuthSession, error) {
	row := q.db.QueryRow(ctx, findValidSessionByToken, token)
	var i AuthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Meta,
		&i.IssuedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const findValidSessionByUserId = `-- name: FindValidSessionByUserId :one
select id, user_id, token, meta, issued_at, expires_at
from auth_sessions
where user_id = $1 and expires_at > now() + interval '1 second'
`

func (q *Queries) FindValidSessionByUserId(ctx context.Context, userID int32) (AuthSession, error) {
	row := q.db.QueryRow(ctx, findValidSessionByUserId, userID)
	var i AuthSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Meta,
		&i.IssuedAt,
		&i.ExpiresAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (first_name, last_name, email, username, hashed_password, email_verified) values (initcap($1), initcap($2), lower($3), lower($4), $5, $6) returning id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
`

type CreateUserParams struct {
	FirstName     string `json:"first_name"`
	LastName      string `json:"last_name"`
	Email         string `json:"email"`
	Username      string `json:"username"`
	PasswordHash  string `json:"password_hash"`
	EmailVerified bool   `json:"email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.EmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
select id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
from users
where email = $1 and deleted_at is null
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
select id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
from users
where id = $1 and deleted_at is null
`

func (q *Queries) FindUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const findUserByPublicId = `-- name: FindUserByPublicId :one
select id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
from users
where public_id = $1 and deleted_at is null
`

func (q *Queries) FindUserByPublicId(ctx context.Context, publicID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByPublicId, publicID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
select id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
from users
where username = $1 and deleted_at is null
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :one
update users set email = lower($1) where id = $2 returning id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
`

type UpdateEmailParams struct {
	Email string `json:"email"`
	ID    int32  `json:"id"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
update users set hashed_password = $2 where id = $1 returning id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
`

type UpdatePasswordParams struct {
	ID             int32  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.ID, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
update users set
    first_name = initcap($1),
    last_name = initcap($2),
    username = lower($3)
where id = $4 returning id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
`

type UpdateProfileParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Username  string `json:"username"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (User, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
select exists (select 1 from users where email = $1)
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userExistsByUsername = `-- name: UserExistsByUsername :one
select exists (select 1 from users where username = $1)
`

func (q *Queries) UserExistsByUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const verifyEmail = `-- name: VerifyEmail :one
update users set email_verified = true where id = $1 returning id, public_id, first_name, last_name, email, username, hashed_password, email_verified, created_at, updated_at, deleted_at, avatar_id
`

func (q *Queries) VerifyEmail(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, verifyEmail, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PublicID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AvatarID,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package queries

import (
	"context"
)

// iteratorForEnqueueEntries implements pgx.CopyFromSource.
type iteratorForEnqueueEntries struct {
	rows                 []EnqueueEntriesParams
	skippedFirstNextCall bool
}

func (r *iteratorForEnqueueEntries) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForEnqueueEntries) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].EntryID,
		r.rows[0].Payload,
	}, nil
}

func (r iteratorForEnqueueEntries) Err() error {
	return nil
}

func (q *Queries) EnqueueEntries(ctx context.Context, arg []EnqueueEntriesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"entries_queue"}, []string{"entry_id", "payload"}, &iteratorForEnqueueEntries{rows: arg})
}

// iteratorForInsertChunks implements pgx.CopyFromSource.
type iteratorForInsertChunks struct {
	rows                 []InsertChunksParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertChunks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertChunks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].EntryID,
		r.rows[0].Index,
		r.rows[0].MinVersion,
		r.rows[0].Content,
		r.rows[0].Language,
	}, nil
}

func (r iteratorForInsertChunks) Err() error {
	return nil
}

func (q *Queries) InsertChunks(ctx context.Context, arg []InsertChunksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"entry_chunks"}, []string{"entry_id", "chunk_index", "min_version", "content", "language"}, &iteratorForInsertChunks{rows: arg})
}

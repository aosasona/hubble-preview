// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Status uint16

// Status_TypeID is the unique identifier for the type Status.
const Status_TypeID = 0xb19e38a9b2c4f8ec

// Values of Status.
const (
	Status_queued     Status = 0
	Status_processing Status = 1
	Status_completed  Status = 2
	Status_failed     Status = 3
	Status_canceled   Status = 4
	Status_paused     Status = 5
)

// String returns the enum's constant name.
func (c Status) String() string {
	switch c {
	case Status_queued:
		return "queued"
	case Status_processing:
		return "processing"
	case Status_completed:
		return "completed"
	case Status_failed:
		return "failed"
	case Status_canceled:
		return "canceled"
	case Status_paused:
		return "paused"

	default:
		return ""
	}
}

// StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func StatusFromString(c string) Status {
	switch c {
	case "queued":
		return Status_queued
	case "processing":
		return Status_processing
	case "completed":
		return Status_completed
	case "failed":
		return Status_failed
	case "canceled":
		return Status_canceled
	case "paused":
		return Status_paused

	default:
		return 0
	}
}

type Status_List = capnp.EnumList[Status]

func NewStatus_List(s *capnp.Segment, sz int32) (Status_List, error) {
	return capnp.NewEnumList[Status](s, sz)
}

type Type uint16

// Type_TypeID is the unique identifier for the type Type.
const Type_TypeID = 0xcc84200765309f2f

// Values of Type.
const (
	Type_link         Type = 0
	Type_audio        Type = 1
	Type_video        Type = 2
	Type_image        Type = 3
	Type_pdf          Type = 4
	Type_interchange  Type = 5
	Type_epub         Type = 6
	Type_wordDocument Type = 7
	Type_presentation Type = 8
	Type_spreadsheet  Type = 9
	Type_html         Type = 10
	Type_markdown     Type = 11
	Type_plainText    Type = 12
	Type_archive      Type = 13
	Type_code         Type = 14
	Type_comment      Type = 15
	Type_other        Type = 16
)

// String returns the enum's constant name.
func (c Type) String() string {
	switch c {
	case Type_link:
		return "link"
	case Type_audio:
		return "audio"
	case Type_video:
		return "video"
	case Type_image:
		return "image"
	case Type_pdf:
		return "pdf"
	case Type_interchange:
		return "interchange"
	case Type_epub:
		return "epub"
	case Type_wordDocument:
		return "wordDocument"
	case Type_presentation:
		return "presentation"
	case Type_spreadsheet:
		return "spreadsheet"
	case Type_html:
		return "html"
	case Type_markdown:
		return "markdown"
	case Type_plainText:
		return "plainText"
	case Type_archive:
		return "archive"
	case Type_code:
		return "code"
	case Type_comment:
		return "comment"
	case Type_other:
		return "other"

	default:
		return ""
	}
}

// TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TypeFromString(c string) Type {
	switch c {
	case "link":
		return Type_link
	case "audio":
		return Type_audio
	case "video":
		return Type_video
	case "image":
		return Type_image
	case "pdf":
		return Type_pdf
	case "interchange":
		return Type_interchange
	case "epub":
		return Type_epub
	case "wordDocument":
		return Type_wordDocument
	case "presentation":
		return Type_presentation
	case "spreadsheet":
		return Type_spreadsheet
	case "html":
		return Type_html
	case "markdown":
		return Type_markdown
	case "plainText":
		return Type_plainText
	case "archive":
		return Type_archive
	case "code":
		return Type_code
	case "comment":
		return Type_comment
	case "other":
		return Type_other

	default:
		return 0
	}
}

type Type_List = capnp.EnumList[Type]

func NewType_List(s *capnp.Segment, sz int32) (Type_List, error) {
	return capnp.NewEnumList[Type](s, sz)
}

type Queue capnp.Struct

// Queue_TypeID is the unique identifier for the type Queue.
const Queue_TypeID = 0xa4817e74ca5372d0

func NewQueue(s *capnp.Segment) (Queue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Queue(st), err
}

func NewRootQueue(s *capnp.Segment) (Queue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Queue(st), err
}

func ReadRootQueue(msg *capnp.Message) (Queue, error) {
	root, err := msg.Root()
	return Queue(root.Struct()), err
}

func (s Queue) String() string {
	str, _ := text.Marshal(0xa4817e74ca5372d0, capnp.Struct(s))
	return str
}

func (s Queue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Queue) DecodeFromPtr(p capnp.Ptr) Queue {
	return Queue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Queue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Queue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Queue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Queue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Queue) Status() Status {
	return Status(capnp.Struct(s).Uint16(0))
}

func (s Queue) SetStatus(v Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Queue) QueuedAt() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Queue) SetQueuedAt(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// Queue_List is a list of Queue.
type Queue_List = capnp.StructList[Queue]

// NewQueue creates a new list of Queue.
func NewQueue_List(s *capnp.Segment, sz int32) (Queue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Queue](l), err
}

// Queue_Future is a wrapper for a Queue promised by a client call.
type Queue_Future struct{ *capnp.Future }

func (f Queue_Future) Struct() (Queue, error) {
	p, err := f.Future.Ptr()
	return Queue(p.Struct()), err
}

type Collection capnp.Struct

// Collection_TypeID is the unique identifier for the type Collection.
const Collection_TypeID = 0xade1e39c301d927f

func NewCollection(s *capnp.Segment) (Collection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Collection(st), err
}

func NewRootCollection(s *capnp.Segment) (Collection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Collection(st), err
}

func ReadRootCollection(msg *capnp.Message) (Collection, error) {
	root, err := msg.Root()
	return Collection(root.Struct()), err
}

func (s Collection) String() string {
	str, _ := text.Marshal(0xade1e39c301d927f, capnp.Struct(s))
	return str
}

func (s Collection) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Collection) DecodeFromPtr(p capnp.Ptr) Collection {
	return Collection(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Collection) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Collection) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Collection) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Collection) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Collection) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Collection) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Collection) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Collection) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Collection) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Collection) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Collection) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Collection) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Collection) Slug() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Collection) HasSlug() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Collection) SlugBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Collection) SetSlug(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Collection_List is a list of Collection.
type Collection_List = capnp.StructList[Collection]

// NewCollection creates a new list of Collection.
func NewCollection_List(s *capnp.Segment, sz int32) (Collection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Collection](l), err
}

// Collection_Future is a wrapper for a Collection promised by a client call.
type Collection_Future struct{ *capnp.Future }

func (f Collection_Future) Struct() (Collection, error) {
	p, err := f.Future.Ptr()
	return Collection(p.Struct()), err
}

type Owner capnp.Struct

// Owner_TypeID is the unique identifier for the type Owner.
const Owner_TypeID = 0x83f26b813a3b8b21

func NewOwner(s *capnp.Segment) (Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Owner(st), err
}

func NewRootOwner(s *capnp.Segment) (Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Owner(st), err
}

func ReadRootOwner(msg *capnp.Message) (Owner, error) {
	root, err := msg.Root()
	return Owner(root.Struct()), err
}

func (s Owner) String() string {
	str, _ := text.Marshal(0x83f26b813a3b8b21, capnp.Struct(s))
	return str
}

func (s Owner) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Owner) DecodeFromPtr(p capnp.Ptr) Owner {
	return Owner(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Owner) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Owner) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Owner) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Owner) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Owner) Username() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Owner) HasUsername() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Owner) UsernameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Owner) SetUsername(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Owner) FirstName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Owner) HasFirstName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Owner) FirstNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Owner) SetFirstName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Owner) LastName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Owner) HasLastName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Owner) LastNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Owner) SetLastName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Owner_List is a list of Owner.
type Owner_List = capnp.StructList[Owner]

// NewOwner creates a new list of Owner.
func NewOwner_List(s *capnp.Segment, sz int32) (Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Owner](l), err
}

// Owner_Future is a wrapper for a Owner promised by a client call.
type Owner_Future struct{ *capnp.Future }

func (f Owner_Future) Struct() (Owner, error) {
	p, err := f.Future.Ptr()
	return Owner(p.Struct()), err
}

type Entry capnp.Struct

// Entry_TypeID is the unique identifier for the type Entry.
const Entry_TypeID = 0xa2f47213c9289046

func NewEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 8})
	return Entry(st), err
}

func NewRootEntry(s *capnp.Segment) (Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 8})
	return Entry(st), err
}

func ReadRootEntry(msg *capnp.Message) (Entry, error) {
	root, err := msg.Root()
	return Entry(root.Struct()), err
}

func (s Entry) String() string {
	str, _ := text.Marshal(0xa2f47213c9289046, capnp.Struct(s))
	return str
}

func (s Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Entry) DecodeFromPtr(p capnp.Ptr) Entry {
	return Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Entry) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Entry) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Entry) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Entry) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Entry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Entry) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Entry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Entry) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Entry) Markdown() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Entry) HasMarkdown() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Entry) MarkdownBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Entry) SetMarkdown(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Entry) PlainText() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s Entry) HasPlainText() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s Entry) PlainTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s Entry) SetPlainText(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s Entry) Version() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s Entry) SetVersion(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s Entry) Type() Type {
	return Type(capnp.Struct(s).Uint16(4))
}

func (s Entry) SetType(v Type) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Entry) Collection() (Collection, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Collection(p.Struct()), err
}

func (s Entry) HasCollection() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Entry) SetCollection(v Collection) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewCollection sets the collection field to a newly
// allocated Collection struct, preferring placement in s's segment.
func (s Entry) NewCollection() (Collection, error) {
	ss, err := NewCollection(capnp.Struct(s).Segment())
	if err != nil {
		return Collection{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Entry) Owner() (Owner, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Owner(p.Struct()), err
}

func (s Entry) HasOwner() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Entry) SetOwner(v Owner) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewOwner sets the owner field to a newly
// allocated Owner struct, preferring placement in s's segment.
func (s Entry) NewOwner() (Owner, error) {
	ss, err := NewOwner(capnp.Struct(s).Segment())
	if err != nil {
		return Owner{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Entry) CreatedAt() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Entry) SetCreatedAt(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Entry) Queue() (Queue, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return Queue(p.Struct()), err
}

func (s Entry) HasQueue() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Entry) SetQueue(v Queue) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewQueue sets the queue field to a newly
// allocated Queue struct, preferring placement in s's segment.
func (s Entry) NewQueue() (Queue, error) {
	ss, err := NewQueue(capnp.Struct(s).Segment())
	if err != nil {
		return Queue{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Entry) FilesizeBytes() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s Entry) SetFilesizeBytes(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

func (s Entry) Url() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s Entry) HasUrl() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s Entry) UrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s Entry) SetUrl(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

// Entry_List is a list of Entry.
type Entry_List = capnp.StructList[Entry]

// NewEntry creates a new list of Entry.
func NewEntry_List(s *capnp.Segment, sz int32) (Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 8}, sz)
	return capnp.StructList[Entry](l), err
}

// Entry_Future is a wrapper for a Entry promised by a client call.
type Entry_Future struct{ *capnp.Future }

func (f Entry_Future) Struct() (Entry, error) {
	p, err := f.Future.Ptr()
	return Entry(p.Struct()), err
}
func (p Entry_Future) Collection() Collection_Future {
	return Collection_Future{Future: p.Future.Field(3, nil)}
}
func (p Entry_Future) Owner() Owner_Future {
	return Owner_Future{Future: p.Future.Field(4, nil)}
}
func (p Entry_Future) Queue() Queue_Future {
	return Queue_Future{Future: p.Future.Field(5, nil)}
}

type UpdateEntryRequest capnp.Struct

// UpdateEntryRequest_TypeID is the unique identifier for the type UpdateEntryRequest.
const UpdateEntryRequest_TypeID = 0xac799c62526f9a44

func NewUpdateEntryRequest(s *capnp.Segment) (UpdateEntryRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return UpdateEntryRequest(st), err
}

func NewRootUpdateEntryRequest(s *capnp.Segment) (UpdateEntryRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return UpdateEntryRequest(st), err
}

func ReadRootUpdateEntryRequest(msg *capnp.Message) (UpdateEntryRequest, error) {
	root, err := msg.Root()
	return UpdateEntryRequest(root.Struct()), err
}

func (s UpdateEntryRequest) String() string {
	str, _ := text.Marshal(0xac799c62526f9a44, capnp.Struct(s))
	return str
}

func (s UpdateEntryRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UpdateEntryRequest) DecodeFromPtr(p capnp.Ptr) UpdateEntryRequest {
	return UpdateEntryRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UpdateEntryRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UpdateEntryRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UpdateEntryRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UpdateEntryRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UpdateEntryRequest) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UpdateEntryRequest) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UpdateEntryRequest) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UpdateEntryRequest) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UpdateEntryRequest) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UpdateEntryRequest) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UpdateEntryRequest) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UpdateEntryRequest) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s UpdateEntryRequest) MarkdownContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s UpdateEntryRequest) HasMarkdownContent() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s UpdateEntryRequest) MarkdownContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s UpdateEntryRequest) SetMarkdownContent(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s UpdateEntryRequest) PlainTextContent() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s UpdateEntryRequest) HasPlainTextContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s UpdateEntryRequest) PlainTextContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s UpdateEntryRequest) SetPlainTextContent(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s UpdateEntryRequest) Checksum() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s UpdateEntryRequest) HasChecksum() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s UpdateEntryRequest) ChecksumBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s UpdateEntryRequest) SetChecksum(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// UpdateEntryRequest_List is a list of UpdateEntryRequest.
type UpdateEntryRequest_List = capnp.StructList[UpdateEntryRequest]

// NewUpdateEntryRequest creates a new list of UpdateEntryRequest.
func NewUpdateEntryRequest_List(s *capnp.Segment, sz int32) (UpdateEntryRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[UpdateEntryRequest](l), err
}

// UpdateEntryRequest_Future is a wrapper for a UpdateEntryRequest promised by a client call.
type UpdateEntryRequest_Future struct{ *capnp.Future }

func (f UpdateEntryRequest_Future) Struct() (UpdateEntryRequest, error) {
	p, err := f.Future.Ptr()
	return UpdateEntryRequest(p.Struct()), err
}

type ChunkResult capnp.Struct

// ChunkResult_TypeID is the unique identifier for the type ChunkResult.
const ChunkResult_TypeID = 0x8acec9676d588c40

func NewChunkResult(s *capnp.Segment) (ChunkResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChunkResult(st), err
}

func NewRootChunkResult(s *capnp.Segment) (ChunkResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChunkResult(st), err
}

func ReadRootChunkResult(msg *capnp.Message) (ChunkResult, error) {
	root, err := msg.Root()
	return ChunkResult(root.Struct()), err
}

func (s ChunkResult) String() string {
	str, _ := text.Marshal(0x8acec9676d588c40, capnp.Struct(s))
	return str
}

func (s ChunkResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChunkResult) DecodeFromPtr(p capnp.Ptr) ChunkResult {
	return ChunkResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChunkResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChunkResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChunkResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChunkResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChunkResult) Chunks() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s ChunkResult) HasChunks() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChunkResult) SetChunks(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChunks sets the chunks field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ChunkResult) NewChunks(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ChunkResult_List is a list of ChunkResult.
type ChunkResult_List = capnp.StructList[ChunkResult]

// NewChunkResult creates a new list of ChunkResult.
func NewChunkResult_List(s *capnp.Segment, sz int32) (ChunkResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ChunkResult](l), err
}

// ChunkResult_Future is a wrapper for a ChunkResult promised by a client call.
type ChunkResult_Future struct{ *capnp.Future }

func (f ChunkResult_Future) Struct() (ChunkResult, error) {
	p, err := f.Future.Ptr()
	return ChunkResult(p.Struct()), err
}

type EntryChunk capnp.Struct

// EntryChunk_TypeID is the unique identifier for the type EntryChunk.
const EntryChunk_TypeID = 0x9a787a639605dfbd

func NewEntryChunk(s *capnp.Segment) (EntryChunk, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return EntryChunk(st), err
}

func NewRootEntryChunk(s *capnp.Segment) (EntryChunk, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return EntryChunk(st), err
}

func ReadRootEntryChunk(msg *capnp.Message) (EntryChunk, error) {
	root, err := msg.Root()
	return EntryChunk(root.Struct()), err
}

func (s EntryChunk) String() string {
	str, _ := text.Marshal(0x9a787a639605dfbd, capnp.Struct(s))
	return str
}

func (s EntryChunk) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EntryChunk) DecodeFromPtr(p capnp.Ptr) EntryChunk {
	return EntryChunk(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EntryChunk) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EntryChunk) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EntryChunk) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EntryChunk) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EntryChunk) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s EntryChunk) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s EntryChunk) EntryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s EntryChunk) HasEntryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EntryChunk) EntryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s EntryChunk) SetEntryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s EntryChunk) Index() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s EntryChunk) SetIndex(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s EntryChunk) MinimumVersion() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s EntryChunk) SetMinimumVersion(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s EntryChunk) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s EntryChunk) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EntryChunk) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s EntryChunk) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s EntryChunk) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s EntryChunk) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EntryChunk) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s EntryChunk) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s EntryChunk) CreatedAt() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s EntryChunk) SetCreatedAt(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

// EntryChunk_List is a list of EntryChunk.
type EntryChunk_List = capnp.StructList[EntryChunk]

// NewEntryChunk creates a new list of EntryChunk.
func NewEntryChunk_List(s *capnp.Segment, sz int32) (EntryChunk_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[EntryChunk](l), err
}

// EntryChunk_Future is a wrapper for a EntryChunk promised by a client call.
type EntryChunk_Future struct{ *capnp.Future }

func (f EntryChunk_Future) Struct() (EntryChunk, error) {
	p, err := f.Future.Ptr()
	return EntryChunk(p.Struct()), err
}

type CreateChunkRequest capnp.Struct

// CreateChunkRequest_TypeID is the unique identifier for the type CreateChunkRequest.
const CreateChunkRequest_TypeID = 0xb3c7a89569ec2fa9

func NewCreateChunkRequest(s *capnp.Segment) (CreateChunkRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CreateChunkRequest(st), err
}

func NewRootCreateChunkRequest(s *capnp.Segment) (CreateChunkRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CreateChunkRequest(st), err
}

func ReadRootCreateChunkRequest(msg *capnp.Message) (CreateChunkRequest, error) {
	root, err := msg.Root()
	return CreateChunkRequest(root.Struct()), err
}

func (s CreateChunkRequest) String() string {
	str, _ := text.Marshal(0xb3c7a89569ec2fa9, capnp.Struct(s))
	return str
}

func (s CreateChunkRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateChunkRequest) DecodeFromPtr(p capnp.Ptr) CreateChunkRequest {
	return CreateChunkRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateChunkRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateChunkRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateChunkRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateChunkRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateChunkRequest) EntryId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CreateChunkRequest) HasEntryId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateChunkRequest) EntryIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CreateChunkRequest) SetEntryId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CreateChunkRequest) Index() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s CreateChunkRequest) SetIndex(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s CreateChunkRequest) MinimumVersion() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s CreateChunkRequest) SetMinimumVersion(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s CreateChunkRequest) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CreateChunkRequest) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CreateChunkRequest) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CreateChunkRequest) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CreateChunkRequest) Language() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CreateChunkRequest) HasLanguage() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CreateChunkRequest) LanguageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CreateChunkRequest) SetLanguage(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CreateChunkRequest_List is a list of CreateChunkRequest.
type CreateChunkRequest_List = capnp.StructList[CreateChunkRequest]

// NewCreateChunkRequest creates a new list of CreateChunkRequest.
func NewCreateChunkRequest_List(s *capnp.Segment, sz int32) (CreateChunkRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CreateChunkRequest](l), err
}

// CreateChunkRequest_Future is a wrapper for a CreateChunkRequest promised by a client call.
type CreateChunkRequest_Future struct{ *capnp.Future }

func (f CreateChunkRequest_Future) Struct() (CreateChunkRequest, error) {
	p, err := f.Future.Ptr()
	return CreateChunkRequest(p.Struct()), err
}

type CreateChunksRequest capnp.Struct

// CreateChunksRequest_TypeID is the unique identifier for the type CreateChunksRequest.
const CreateChunksRequest_TypeID = 0xaf5e2f1329031357

func NewCreateChunksRequest(s *capnp.Segment) (CreateChunksRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CreateChunksRequest(st), err
}

func NewRootCreateChunksRequest(s *capnp.Segment) (CreateChunksRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CreateChunksRequest(st), err
}

func ReadRootCreateChunksRequest(msg *capnp.Message) (CreateChunksRequest, error) {
	root, err := msg.Root()
	return CreateChunksRequest(root.Struct()), err
}

func (s CreateChunksRequest) String() string {
	str, _ := text.Marshal(0xaf5e2f1329031357, capnp.Struct(s))
	return str
}

func (s CreateChunksRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CreateChunksRequest) DecodeFromPtr(p capnp.Ptr) CreateChunksRequest {
	return CreateChunksRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CreateChunksRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CreateChunksRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CreateChunksRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CreateChunksRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CreateChunksRequest) Chunks() (CreateChunkRequest_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CreateChunkRequest_List(p.List()), err
}

func (s CreateChunksRequest) HasChunks() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CreateChunksRequest) SetChunks(v CreateChunkRequest_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChunks sets the chunks field to a newly
// allocated CreateChunkRequest_List, preferring placement in s's segment.
func (s CreateChunksRequest) NewChunks(n int32) (CreateChunkRequest_List, error) {
	l, err := NewCreateChunkRequest_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CreateChunkRequest_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CreateChunksRequest_List is a list of CreateChunksRequest.
type CreateChunksRequest_List = capnp.StructList[CreateChunksRequest]

// NewCreateChunksRequest creates a new list of CreateChunksRequest.
func NewCreateChunksRequest_List(s *capnp.Segment, sz int32) (CreateChunksRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CreateChunksRequest](l), err
}

// CreateChunksRequest_Future is a wrapper for a CreateChunksRequest promised by a client call.
type CreateChunksRequest_Future struct{ *capnp.Future }

func (f CreateChunksRequest_Future) Struct() (CreateChunksRequest, error) {
	p, err := f.Future.Ptr()
	return CreateChunksRequest(p.Struct()), err
}

const schema_89f9fd74f165e666 = "x\xda\xb4W\x7f\x8cTW\xf5?\xe7\xdd\x99\x9d\xfd1" +
	"\xb3oo\xde|\xf3\xb5\x8d\xcdXR\x92\xb2*?\x16" +
	"\xab\xb0\xd8\x0c\xbb\x80\x02\x02\xee\xdd\x01\xa5\x04\x1a\x1e\xf3" +
	".;\xaf;\xf3\xde\xec\xfb\xc12\x04\xdcR!\x01l" +
	"\x03%V\x0b\x82DS\x82\xc4b\xad\xdaDHIZ" +
	"\x021(m\xfa\x87M\xec\x1fU\x8bQ\x13\xd2?\xb4" +
	"\xb6\x89\x92\xd8g\xce\x9d\x9d\x99\xc7\xec\x92\xd4\xc4\xfe\xb5" +
	"o\xce\xfb\xbc{?\xe7s>\xe7\xdc\xbb\x0b7$\x97" +
	"'\x16e\xcet\x82&\xacdGt\xff\xb7\x96\x0d\xee" +
	"\x1f\x7f\xef\x9b\xc0\xd3\x18\xed\xfc\x8b\xfc{\xf0\xef\x7f\x1d" +
	"\x86$K\x01\x18\x0f%\x8e\x1b\x0f'\xe8ii\xe2\x05" +
	"\xc0h\xf9\x93\x9b+c\xd7_?\xd2\x86EB\xbc\x9d" +
	"\xb8b\xfcYa\xdfI\xe4\x01\xa3\xa37\xee\xcd>Z" +
	"\xbe}Ba\x97}0<ub\xcb\x92K\x90\xd4\x08" +
	"\xc1\x93W\x8c{\x92\xf4\xf4\x7f\xc9I\xc0\xe8\xf2\x1f\x92" +
	"\xdf)\xee\xd9}\x12D\x1aY;\x89\x89\xe4%\xa3F" +
	"\xe0\xc5a\xf2(\x02F_:\xf6\xe0u\xc3{\xff\x87" +
	"\xed\xe8NBw\xa5\x8e\x1b<E\xe8L\xea\x9c\x06\x18" +
	"\xbd\xe1\x15~\x1d|c\xffs\x84\xd6Zh\xc5\xf4\xcd" +
	"\xae\xe3\xc6\xdb]\xf4\xf4V\x17\xf1\x98xd\xcd\x85n" +
	"\xf3\xe5s\xc0{1\xfa\xffK\x8bN\xac\xf8q\xfa\xf9" +
	"i\xceK\xbbo\x1a\xab\xba\xe9i\xa8\x9b\xb0+O\xba" +
	"\xa3;N\xd5\x9eo\xd3Beu\xba\xfb\xb6q\x9e\xb0" +
	"\x8b\xcfv\xe7\x88\xf2\xd4\xf1\xfb\x16\x9e\xfa\xd3;\x17f" +
	"\x13\xf9Z\xcf%\xe3\xb5\x1ez\xba\xdeC\"\x7f\xdd`" +
	"\xf3\x8c\x05\x8f\xbe0\x8b\xc8\x8b\xcd\xb4\x86F%M`" +
	";M*\xaf\xfa\xde\xd1\xe1\xb7\xce-x\x11D/\xce" +
	"\xa0|\"\xfd\x9eqV\x81\x7f\x90\xa6\x95\xdf\xfd\xe7\xd5" +
	"\x9f\x9d_\xf2\xfd\x17\x81\xa7cJ\x00\x1ak2'\x0d" +
	"\x91!\xe0\xfa\xccw\x01\xa3\xf3\x0b\xde\xb5\x9f\xf9\xd1\xaf" +
	"~N\x9a\xcd\xe0{:s\xdb8\x9fQ\xc9eTr" +
	"Us\xf4\xd3O\xcc\xff\xc7of\xab\xf4\xe5\xde\x9b\xc6" +
	"\xf5^\x95f/\xa9\xb6\xe0\xccB\x99\xfa\xd4\x81\x1b3" +
	"(\xdc\xaf\x1f1\xe6\xe9\xb4\xea\\\xfd\x0c\xad\xba\xec\\" +
	"\xd7\xa6\x9f\\t\xfe\xd6\x9e\x99\xe2\xb0\xa8\xef\x96\xf1p" +
	"\x9f*K\xdf_\x01\xa3\xf4\x07\xb9-\xe7^\xbf\xf2~" +
	"\x1b\x05e\xcc\xfb\xf8-c\x1e\xa7\xa7\xb9\x9c${\xec" +
	"\xf8\xe4\xe7\xef\xdf\xc7>\xac'\xd7\x06\xde\xc4o\x19\xa6" +
	"\x02o\xe3\xc4w\xc7\xef\xef\xd92rx\xe2C\xe0\xbd" +
	"Z\x8b\x04\xa0q\x91\xdf4\xae)\xe0\xab\xfc\x0b\xb0\"" +
	"\x92N\xe0\xd5\xe6\x17M\xac:\xd5\xc1\xafN:\x12\xbd" +
	"\x11D\x91f\x09\x80\x04\x02\xf0Uk\x01\xc4J\x86b" +
	"DC\x8e\x98E\x0a\xae\x1f\x05\x10\xeb\x18\x8a\xcd\x1ar" +
	"M\xcb\xa2\x06\xc07\x11r#C\xb1]\xc3(\xf4\xa5" +
	"\xe7\x98\x15\x09\x00\x98\x06\x0d\xd3\x80\xd1N\xdb\xf3\x83\x0d" +
	"f\x05P6ceS\x85\xee\xc058i\xc4iE" +
	")t\xc6G\xa5\x1f\x96\x03 f\x89&\xb3\xcc \x80" +
	"\xe8d(\x1e\xd00_$\x98\x8f\xbd\x80#\x0c\xd5J" +
	"\xbd\x80\x91\x1f\xb8\x9el\xacT\xa0\x1f_\xd95b\xda" +
	"\x9eZ\xa9\xb3\xb9\xd2\xbc9\x00\xe2\x01\x86ba,\xc7" +
	"\xcf\x0e\x00\x88\x07\x19\x8a\xcfi\x98\x1a\x97\xb5\x06\xbd\xdc" +
	".\xb3\x1c\xca\x19d\x95\x80\xab\x9c\xc0\xcb\xd7\x14e\xda" +
	"\xe1\x93\xcd\x1d^\xba\x17@\xfc\x94\xa1xY\xc3\xc6\x06" +
	"\x17\x87\x01\xc4/\x18\x8aWHD\xac\x8bx\x99v\xfd" +
	"%CqUC\xce\xb4,2\x00\xfe\xea\x1e\x00\xf1\x0a" +
	"CqCC\x9e\xc0,&\x00\xf8u\xfa\xfc*C\xf1" +
	"\x86\x86<\xa9e1\x09\xc0_\xa3\x1a\xdc`(~\xa7" +
	"!\xef\xd0\xb2\xd8\x01\xc0\xdf\xa4j\xfd\x96\xa1\xf8\xa3\x86" +
	"\xcc\xb60\x01\x1a&\x00\xa7\x14\xf55V31\xdb\xb1" +
	"\xe4\xee\xc6\xdb\xa8b;v%\xac|\x0d\xf2\xd2\xf3m" +
	"\xd7i~Vt\x9d@:A\xac\x84\xceXh\x8e\xdd" +
	"Q\xc2\xa2'\xcd@ZC\x80\x01&A\xc3\xe4lJ" +
	"a\x8dDZ\xd8\x10\xc9\x18\xc2{\x01\x0a_D\x86\x85" +
	"\xd5\xd8\xaa\x84\xb1\x0a\xfb\x01\x0a\xcb)\xbe\x0e[\x863" +
	"\xd6\xe0Z\x80\xc2j\x8aoD\x0d1\xa1\xd42\x04\x0e" +
	"\x03\x14\xd6Qx3Nk\x93\xa0\x1eQ\xcb\x8cP|" +
	"+\xc5;\x98\xd2\xccx\x04\xb7\x00\x146S\xdc\xa2x" +
	"*\xa1d3L\x1c\x00(l\xa5x\x89\xe2\x9d\x98U" +
	"\xbd&q\x14\xa0`Q\xbcJ\xf1\xaed\x16;\x01\x8c" +
	"\x8a\xc2\x97(\x1eP\xbc[\xcbb\x17\x1d\x04\xe8\x01\x14" +
	"\xaa\x14\xdfK\xf1\x9e\x8e,v\x03\x185\x9c\x03P\x08" +
	"(\xfe8\xc5Y*\x8b=\x00\xc6>\xb5\xfe^\x8a\x1f" +
	"\xc2z\xc5\xa6e\xd5\xa9\xa3\x9a\x1aWLo\xdcr'" +
	"\x9d\x98\xeeS\xbb\xee\xac\x95\x1e\xd4\xaa\x12\xf5\xd6\xf8\x02" +
	"D\x9d\xca\xe3\x96\xcb\xb2\x18\xd8\xc0\\\x07\xfbZc\x1e" +
	"\x10\xfb\x00s\xee\xa4#=\xeck\x9d\xb1\xf5\xf8lU" +
	"\xcdM\x842\x94\xd8\xd7:\xaf\xa6\xb1;\xed\xb2\xf4\xed" +
	"=\x12r\xc3\xb5@\xfa\x0d|*\xf4\xca\xcd\x0c\xaae" +
	"\xd3v6\xca\xdd\xb4\xde\xac\xfd$B\x19\xa2lk\xd6" +
	"\xc1\xd9\x9a\x95|\xff\x19\x86b\x89\x86y?0\x83\xd0" +
	"G\xbdupL\xa7\xad\xb8ZC\x01)\xd6p\xa5#" +
	"\x83I\xd7\x1b\x9f\xaf\x15M\xdaqC\xfd\xe7ji\xa6" +
	",\xe9\xfd\xef\xc7\x84\x9aD\x9b\xaa\x96\x19Hj\x81\xda" +
	"h^N\x84\xd2\x0fh\xa7ls\xa7}4.v3" +
	"\x14\x07b;\xed\xef\x07\x10{\x19\x8aC\xb1\xa1{\xf0" +
	"\x09\x00q\x80\xa18F\xa3\x81\xd5\xe7\xc5S\xa4\xc6\x93" +
	"\x0c\xc5\xb3d\xabD}^<s\x04@<\xcbP<" +
	"\xf7\x11<\x85+\xeaM\x1e\xeb\xe8\x92,\x8e\xfba%" +
	"\xde\xe5\x8d\xfaa\xd0\x80\xc3\xecu\\\xe1\x96\xcby2" +
	"\x9c\xeb\xb4\x9d.\x94\xe8r\x86b],\xd15\xfd\xb1" +
	"#\xa7\x91\xe8z\x0a\xaef(6\xde\x9d\xbe\xee\x97\xc3" +
	"\xb1\x19\x0c\x98b\xa0\xac\xab&\xb3?Z\x97\xfc\xa3\x1f" +
	"'}\xad\x9b\x05\xa0:Xfw\xcd\xa8\xf4sU\xd7" +
	"\xf1e[\x92\x83\xad$\x9b9\x0eO\xe7\xb8=6\xfc" +
	"\xb7Q\x8e\x9b\x19\x0a\xab\xe5\xe2\xc6\xd4-I\xd3\x92^" +
	"\x8cR\xf3\xd2W\xa7\xa4\xefp\xad\x1af@\xc3L\xbb" +
	"\xfa\x85\xc0\x0cX\xe8\x13\xa9O\xa8}\x86\x06\xe9#\xbe" +
	"t\x0b\x00j\xfc\xa1Q\x00d|\x11\x05\x13|\xdeZ" +
	"j\x0e>w\x10 _\xef\x97\xa8\xea\xb9E\xe9\xfb6" +
	"0g,*\xba\x95jY\x06\x12\xd0\xca\xef4\xed\xb2" +
	"\xb4\xa2\xa2\xe9\x14eYZ\x00\x90\xaf\x9a\xa1/\xad\xb6" +
	"#\xbc\xa5\xfd]\xec>\xdc\xb2{\xd3\xed\x03q\xb7O" +
	"\x0btpO\xcc\xed\x0c\xa7\xddN_\x1fb(\xbeM" +
	"-P\x1f\xf6\xfcij\x81c\x0c\xc5)\xedc=\xe8" +
	"f\xde0\x0a2 \x83\xa5\xa6\xb3\xfc\x18n\x19\x1bk" +
	"U\x09\xca\xbd+\x95*\xd7\xfaU9\xe9\xea\x80\x1a\x7f" +
	"i@\x95\xf3\xc2\x80*\xe7\xd99\xaa\x9c\xa7w\x00`" +
	"\x07?A\xc8\x14\x7f\xfa1\x00\xec\xe4O\xd1\x9f.~" +
	"\x98\xdeu\xf3\x83\xf4\xae\x87\xef\xa3\xfa\xa7y\x8dL\x91" +
	"\xe1\xe10\x00\xf6\xf2\x0a\xbd\xd3\xb9\xa4_}|\xdb\x00" +
	"\x80^\xb6\x9d\xf1\x9c\x19Z\xb6\x9b\xdbe[\xd2\xcd\xd9" +
	"\x15sL\xa6\xaa\xd6\xce\xc8v\x02\xe9\x15K&\xa4\x9c" +
	"1\xa9\xcbj\xb8#\x9at=k\xa5[\x0cA\xafH" +
	"'\x88\xaa\x9e\xf4\xa5\x13\x98\xa0\xd3H\x88\xfc\xaa'M" +
	"\xcb/AJ\xca@/\x05\x95r\xfcp\x8b\x1f\x13S" +
	"\xa6W,\xd9\xbb\xa4^t-9Ut+\xb4\\\xce" +
	"\x0dJ\xd2\xbbkON\xe8\x0d\xc7\xf55kaRK" +
	"ne(J-\xc7I\xaa\xcfv\x86\xa2\x1cs\x9cM" +
	"\xe6\xb2\x18\x8a\xc7c\xf7\xb1}\xfd-\xbf\xe6+2(" +
	"\xb9\x16\xea\xad;w\xfd\xb4\x89\x9ft\xffe\xf7\xce4" +
	"\xd5P\xb9<*\xfd\xaa\xde\x18.\xb1\xb15\xd0\x1a[" +
	"\xb9\xaai\xc77i\xfe/;=\xb5f\xae\xfbe2" +
	"kl\xdd\x98[\x07Znm\x9au\xb0e\xd6;\x0d" +
	"\x9a\x97\xbbm?\xf0\x11AC\xbc\xeb|\\/\x83T" +
	"\xc9\xb5\xd4FJ]>G9\xb7\xab\x1f 5&\x03" +
	"\xbd\xea\xfa\xc1\x7f\x02\x00\x00\xff\xff\xbf\x1d\xadr"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_89f9fd74f165e666,
		Nodes: []uint64{
			0x83f26b813a3b8b21,
			0x8acec9676d588c40,
			0x99fa6c5e141acc8f,
			0x9a787a639605dfbd,
			0xa2f47213c9289046,
			0xa4817e74ca5372d0,
			0xa7bc610aad495971,
			0xac799c62526f9a44,
			0xade1e39c301d927f,
			0xaf5e2f1329031357,
			0xb12fa7d9428f9b45,
			0xb19e38a9b2c4f8ec,
			0xb3c7a89569ec2fa9,
			0xcbf32e822b526170,
			0xcc84200765309f2f,
			0xf06eb9ae5509a73b,
			0xf4c2cea75a1ff50c,
			0xfe037d213677926a,
			0xfe7189505a19de62,
		},
		Compressed: true,
	})
}

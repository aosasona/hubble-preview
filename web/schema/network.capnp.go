// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type NetworkMethod uint16

// NetworkMethod_TypeID is the unique identifier for the type NetworkMethod.
const NetworkMethod_TypeID = 0xfe7189505a19de62

// Values of NetworkMethod.
const (
	NetworkMethod_get  NetworkMethod = 0
	NetworkMethod_post NetworkMethod = 1
)

// String returns the enum's constant name.
func (c NetworkMethod) String() string {
	switch c {
	case NetworkMethod_get:
		return "get"
	case NetworkMethod_post:
		return "post"

	default:
		return ""
	}
}

// NetworkMethodFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NetworkMethodFromString(c string) NetworkMethod {
	switch c {
	case "get":
		return NetworkMethod_get
	case "post":
		return NetworkMethod_post

	default:
		return 0
	}
}

type NetworkMethod_List = capnp.EnumList[NetworkMethod]

func NewNetworkMethod_List(s *capnp.Segment, sz int32) (NetworkMethod_List, error) {
	return capnp.NewEnumList[NetworkMethod](s, sz)
}

type NetworkHeader capnp.Struct

// NetworkHeader_TypeID is the unique identifier for the type NetworkHeader.
const NetworkHeader_TypeID = 0xa7bc610aad495971

func NewNetworkHeader(s *capnp.Segment) (NetworkHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkHeader(st), err
}

func NewRootNetworkHeader(s *capnp.Segment) (NetworkHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkHeader(st), err
}

func ReadRootNetworkHeader(msg *capnp.Message) (NetworkHeader, error) {
	root, err := msg.Root()
	return NetworkHeader(root.Struct()), err
}

func (s NetworkHeader) String() string {
	str, _ := text.Marshal(0xa7bc610aad495971, capnp.Struct(s))
	return str
}

func (s NetworkHeader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NetworkHeader) DecodeFromPtr(p capnp.Ptr) NetworkHeader {
	return NetworkHeader(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NetworkHeader) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NetworkHeader) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NetworkHeader) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NetworkHeader) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NetworkHeader) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NetworkHeader) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NetworkHeader) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkHeader) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NetworkHeader) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NetworkHeader) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NetworkHeader) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NetworkHeader) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// NetworkHeader_List is a list of NetworkHeader.
type NetworkHeader_List = capnp.StructList[NetworkHeader]

// NewNetworkHeader creates a new list of NetworkHeader.
func NewNetworkHeader_List(s *capnp.Segment, sz int32) (NetworkHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[NetworkHeader](l), err
}

// NetworkHeader_Future is a wrapper for a NetworkHeader promised by a client call.
type NetworkHeader_Future struct{ *capnp.Future }

func (f NetworkHeader_Future) Struct() (NetworkHeader, error) {
	p, err := f.Future.Ptr()
	return NetworkHeader(p.Struct()), err
}

type NetworkRequest capnp.Struct

// NetworkRequest_TypeID is the unique identifier for the type NetworkRequest.
const NetworkRequest_TypeID = 0xf06eb9ae5509a73b

func NewNetworkRequest(s *capnp.Segment) (NetworkRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return NetworkRequest(st), err
}

func NewRootNetworkRequest(s *capnp.Segment) (NetworkRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return NetworkRequest(st), err
}

func ReadRootNetworkRequest(msg *capnp.Message) (NetworkRequest, error) {
	root, err := msg.Root()
	return NetworkRequest(root.Struct()), err
}

func (s NetworkRequest) String() string {
	str, _ := text.Marshal(0xf06eb9ae5509a73b, capnp.Struct(s))
	return str
}

func (s NetworkRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NetworkRequest) DecodeFromPtr(p capnp.Ptr) NetworkRequest {
	return NetworkRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NetworkRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NetworkRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NetworkRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NetworkRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NetworkRequest) Method() NetworkMethod {
	return NetworkMethod(capnp.Struct(s).Uint16(0))
}

func (s NetworkRequest) SetMethod(v NetworkMethod) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s NetworkRequest) Url() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NetworkRequest) HasUrl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NetworkRequest) UrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkRequest) SetUrl(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NetworkRequest) Headers() (NetworkHeader_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return NetworkHeader_List(p.List()), err
}

func (s NetworkRequest) HasHeaders() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NetworkRequest) SetHeaders(v NetworkHeader_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated NetworkHeader_List, preferring placement in s's segment.
func (s NetworkRequest) NewHeaders(n int32) (NetworkHeader_List, error) {
	l, err := NewNetworkHeader_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NetworkHeader_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s NetworkRequest) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s NetworkRequest) HasBody() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NetworkRequest) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// NetworkRequest_List is a list of NetworkRequest.
type NetworkRequest_List = capnp.StructList[NetworkRequest]

// NewNetworkRequest creates a new list of NetworkRequest.
func NewNetworkRequest_List(s *capnp.Segment, sz int32) (NetworkRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[NetworkRequest](l), err
}

// NetworkRequest_Future is a wrapper for a NetworkRequest promised by a client call.
type NetworkRequest_Future struct{ *capnp.Future }

func (f NetworkRequest_Future) Struct() (NetworkRequest, error) {
	p, err := f.Future.Ptr()
	return NetworkRequest(p.Struct()), err
}

type NetworkResponse capnp.Struct

// NetworkResponse_TypeID is the unique identifier for the type NetworkResponse.
const NetworkResponse_TypeID = 0xb12fa7d9428f9b45

func NewNetworkResponse(s *capnp.Segment) (NetworkResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NetworkResponse(st), err
}

func NewRootNetworkResponse(s *capnp.Segment) (NetworkResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NetworkResponse(st), err
}

func ReadRootNetworkResponse(msg *capnp.Message) (NetworkResponse, error) {
	root, err := msg.Root()
	return NetworkResponse(root.Struct()), err
}

func (s NetworkResponse) String() string {
	str, _ := text.Marshal(0xb12fa7d9428f9b45, capnp.Struct(s))
	return str
}

func (s NetworkResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NetworkResponse) DecodeFromPtr(p capnp.Ptr) NetworkResponse {
	return NetworkResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NetworkResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NetworkResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NetworkResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NetworkResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NetworkResponse) Status() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NetworkResponse) SetStatus(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NetworkResponse) Headers() (NetworkHeader_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NetworkHeader_List(p.List()), err
}

func (s NetworkResponse) HasHeaders() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NetworkResponse) SetHeaders(v NetworkHeader_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewHeaders sets the headers field to a newly
// allocated NetworkHeader_List, preferring placement in s's segment.
func (s NetworkResponse) NewHeaders(n int32) (NetworkHeader_List, error) {
	l, err := NewNetworkHeader_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NetworkHeader_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s NetworkResponse) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s NetworkResponse) HasBody() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NetworkResponse) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// NetworkResponse_List is a list of NetworkResponse.
type NetworkResponse_List = capnp.StructList[NetworkResponse]

// NewNetworkResponse creates a new list of NetworkResponse.
func NewNetworkResponse_List(s *capnp.Segment, sz int32) (NetworkResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[NetworkResponse](l), err
}

// NetworkResponse_Future is a wrapper for a NetworkResponse promised by a client call.
type NetworkResponse_Future struct{ *capnp.Future }

func (f NetworkResponse_Future) Struct() (NetworkResponse, error) {
	p, err := f.Future.Ptr()
	return NetworkResponse(p.Struct()), err
}

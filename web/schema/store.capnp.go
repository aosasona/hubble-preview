// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type StoreGetResponse capnp.Struct

// StoreGetResponse_TypeID is the unique identifier for the type StoreGetResponse.
const StoreGetResponse_TypeID = 0xfe037d213677926a

func NewStoreGetResponse(s *capnp.Segment) (StoreGetResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StoreGetResponse(st), err
}

func NewRootStoreGetResponse(s *capnp.Segment) (StoreGetResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StoreGetResponse(st), err
}

func ReadRootStoreGetResponse(msg *capnp.Message) (StoreGetResponse, error) {
	root, err := msg.Root()
	return StoreGetResponse(root.Struct()), err
}

func (s StoreGetResponse) String() string {
	str, _ := text.Marshal(0xfe037d213677926a, capnp.Struct(s))
	return str
}

func (s StoreGetResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StoreGetResponse) DecodeFromPtr(p capnp.Ptr) StoreGetResponse {
	return StoreGetResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StoreGetResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StoreGetResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StoreGetResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StoreGetResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StoreGetResponse) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StoreGetResponse) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StoreGetResponse) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StoreGetResponse) SetValue(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s StoreGetResponse) Exists() bool {
	return capnp.Struct(s).Bit(0)
}

func (s StoreGetResponse) SetExists(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// StoreGetResponse_List is a list of StoreGetResponse.
type StoreGetResponse_List = capnp.StructList[StoreGetResponse]

// NewStoreGetResponse creates a new list of StoreGetResponse.
func NewStoreGetResponse_List(s *capnp.Segment, sz int32) (StoreGetResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[StoreGetResponse](l), err
}

// StoreGetResponse_Future is a wrapper for a StoreGetResponse promised by a client call.
type StoreGetResponse_Future struct{ *capnp.Future }

func (f StoreGetResponse_Future) Struct() (StoreGetResponse, error) {
	p, err := f.Future.Ptr()
	return StoreGetResponse(p.Struct()), err
}

type StoreSetRequest capnp.Struct

// StoreSetRequest_TypeID is the unique identifier for the type StoreSetRequest.
const StoreSetRequest_TypeID = 0xcbf32e822b526170

func NewStoreSetRequest(s *capnp.Segment) (StoreSetRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoreSetRequest(st), err
}

func NewRootStoreSetRequest(s *capnp.Segment) (StoreSetRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoreSetRequest(st), err
}

func ReadRootStoreSetRequest(msg *capnp.Message) (StoreSetRequest, error) {
	root, err := msg.Root()
	return StoreSetRequest(root.Struct()), err
}

func (s StoreSetRequest) String() string {
	str, _ := text.Marshal(0xcbf32e822b526170, capnp.Struct(s))
	return str
}

func (s StoreSetRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StoreSetRequest) DecodeFromPtr(p capnp.Ptr) StoreSetRequest {
	return StoreSetRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StoreSetRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StoreSetRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StoreSetRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StoreSetRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StoreSetRequest) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StoreSetRequest) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StoreSetRequest) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StoreSetRequest) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s StoreSetRequest) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s StoreSetRequest) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s StoreSetRequest) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s StoreSetRequest) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// StoreSetRequest_List is a list of StoreSetRequest.
type StoreSetRequest_List = capnp.StructList[StoreSetRequest]

// NewStoreSetRequest creates a new list of StoreSetRequest.
func NewStoreSetRequest_List(s *capnp.Segment, sz int32) (StoreSetRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[StoreSetRequest](l), err
}

// StoreSetRequest_Future is a wrapper for a StoreSetRequest promised by a client call.
type StoreSetRequest_Future struct{ *capnp.Future }

func (f StoreSetRequest_Future) Struct() (StoreSetRequest, error) {
	p, err := f.Future.Ptr()
	return StoreSetRequest(p.Struct()), err
}

type StoreKvPair capnp.Struct

// StoreKvPair_TypeID is the unique identifier for the type StoreKvPair.
const StoreKvPair_TypeID = 0x99fa6c5e141acc8f

func NewStoreKvPair(s *capnp.Segment) (StoreKvPair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoreKvPair(st), err
}

func NewRootStoreKvPair(s *capnp.Segment) (StoreKvPair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return StoreKvPair(st), err
}

func ReadRootStoreKvPair(msg *capnp.Message) (StoreKvPair, error) {
	root, err := msg.Root()
	return StoreKvPair(root.Struct()), err
}

func (s StoreKvPair) String() string {
	str, _ := text.Marshal(0x99fa6c5e141acc8f, capnp.Struct(s))
	return str
}

func (s StoreKvPair) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StoreKvPair) DecodeFromPtr(p capnp.Ptr) StoreKvPair {
	return StoreKvPair(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StoreKvPair) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StoreKvPair) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StoreKvPair) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StoreKvPair) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StoreKvPair) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StoreKvPair) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StoreKvPair) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StoreKvPair) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s StoreKvPair) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s StoreKvPair) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s StoreKvPair) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s StoreKvPair) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// StoreKvPair_List is a list of StoreKvPair.
type StoreKvPair_List = capnp.StructList[StoreKvPair]

// NewStoreKvPair creates a new list of StoreKvPair.
func NewStoreKvPair_List(s *capnp.Segment, sz int32) (StoreKvPair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[StoreKvPair](l), err
}

// StoreKvPair_Future is a wrapper for a StoreKvPair promised by a client call.
type StoreKvPair_Future struct{ *capnp.Future }

func (f StoreKvPair_Future) Struct() (StoreKvPair, error) {
	p, err := f.Future.Ptr()
	return StoreKvPair(p.Struct()), err
}

type StoreAllResponse capnp.Struct

// StoreAllResponse_TypeID is the unique identifier for the type StoreAllResponse.
const StoreAllResponse_TypeID = 0xf4c2cea75a1ff50c

func NewStoreAllResponse(s *capnp.Segment) (StoreAllResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StoreAllResponse(st), err
}

func NewRootStoreAllResponse(s *capnp.Segment) (StoreAllResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StoreAllResponse(st), err
}

func ReadRootStoreAllResponse(msg *capnp.Message) (StoreAllResponse, error) {
	root, err := msg.Root()
	return StoreAllResponse(root.Struct()), err
}

func (s StoreAllResponse) String() string {
	str, _ := text.Marshal(0xf4c2cea75a1ff50c, capnp.Struct(s))
	return str
}

func (s StoreAllResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StoreAllResponse) DecodeFromPtr(p capnp.Ptr) StoreAllResponse {
	return StoreAllResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StoreAllResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StoreAllResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StoreAllResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StoreAllResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StoreAllResponse) Pairs() (StoreKvPair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return StoreKvPair_List(p.List()), err
}

func (s StoreAllResponse) HasPairs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StoreAllResponse) SetPairs(v StoreKvPair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPairs sets the pairs field to a newly
// allocated StoreKvPair_List, preferring placement in s's segment.
func (s StoreAllResponse) NewPairs(n int32) (StoreKvPair_List, error) {
	l, err := NewStoreKvPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return StoreKvPair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StoreAllResponse_List is a list of StoreAllResponse.
type StoreAllResponse_List = capnp.StructList[StoreAllResponse]

// NewStoreAllResponse creates a new list of StoreAllResponse.
func NewStoreAllResponse_List(s *capnp.Segment, sz int32) (StoreAllResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StoreAllResponse](l), err
}

// StoreAllResponse_Future is a wrapper for a StoreAllResponse promised by a client call.
type StoreAllResponse_Future struct{ *capnp.Future }

func (f StoreAllResponse_Future) Struct() (StoreAllResponse, error) {
	p, err := f.Future.Ptr()
	return StoreAllResponse(p.Struct()), err
}

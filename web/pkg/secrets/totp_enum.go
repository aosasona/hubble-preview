// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package secrets

import (
	"errors"
	"fmt"
)

const (
	// ScopeTotp is a Scope of type totp.
	ScopeTotp Scope = "totp"
)

var ErrInvalidScope = errors.New("not a valid Scope")

// String implements the Stringer interface.
func (x Scope) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Scope) IsValid() bool {
	_, err := ParseScope(string(x))
	return err == nil
}

var _ScopeValue = map[string]Scope{
	"totp": ScopeTotp,
}

// ParseScope attempts to convert a string to a Scope.
func ParseScope(name string) (Scope, error) {
	if x, ok := _ScopeValue[name]; ok {
		return x, nil
	}
	return Scope(""), fmt.Errorf("%s is %w", name, ErrInvalidScope)
}

// MarshalText implements the text marshaller method.
func (x Scope) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Scope) UnmarshalText(text []byte) error {
	tmp, err := ParseScope(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

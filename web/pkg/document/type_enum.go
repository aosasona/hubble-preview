// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package document

import (
	"errors"
	"fmt"
)

const (
	// EntryTypeLink is a EntryType of type link.
	EntryTypeLink EntryType = "link"
	// EntryTypeAudio is a EntryType of type audio.
	EntryTypeAudio EntryType = "audio"
	// EntryTypeVideo is a EntryType of type video.
	EntryTypeVideo EntryType = "video"
	// EntryTypeImage is a EntryType of type image.
	EntryTypeImage EntryType = "image"
	// EntryTypePdf is a EntryType of type pdf.
	EntryTypePdf EntryType = "pdf"
	// EntryTypeInterchange is a EntryType of type interchange.
	EntryTypeInterchange EntryType = "interchange"
	// EntryTypeEpub is a EntryType of type epub.
	EntryTypeEpub EntryType = "epub"
	// EntryTypeWordDocument is a EntryType of type word_document.
	EntryTypeWordDocument EntryType = "word_document"
	// EntryTypePresentation is a EntryType of type presentation.
	EntryTypePresentation EntryType = "presentation"
	// EntryTypeSpreadsheet is a EntryType of type spreadsheet.
	EntryTypeSpreadsheet EntryType = "spreadsheet"
	// EntryTypeHtml is a EntryType of type html.
	EntryTypeHtml EntryType = "html"
	// EntryTypeMarkdown is a EntryType of type markdown.
	EntryTypeMarkdown EntryType = "markdown"
	// EntryTypePlainText is a EntryType of type plain_text.
	EntryTypePlainText EntryType = "plain_text"
	// EntryTypeArchive is a EntryType of type archive.
	EntryTypeArchive EntryType = "archive"
	// EntryTypeCode is a EntryType of type code.
	EntryTypeCode EntryType = "code"
	// EntryTypeComment is a EntryType of type comment.
	EntryTypeComment EntryType = "comment"
	// EntryTypeOther is a EntryType of type other.
	EntryTypeOther EntryType = "other"
)

var ErrInvalidEntryType = errors.New("not a valid EntryType")

// String implements the Stringer interface.
func (x EntryType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EntryType) IsValid() bool {
	_, err := ParseEntryType(string(x))
	return err == nil
}

var _EntryTypeValue = map[string]EntryType{
	"link":          EntryTypeLink,
	"audio":         EntryTypeAudio,
	"video":         EntryTypeVideo,
	"image":         EntryTypeImage,
	"pdf":           EntryTypePdf,
	"interchange":   EntryTypeInterchange,
	"epub":          EntryTypeEpub,
	"word_document": EntryTypeWordDocument,
	"presentation":  EntryTypePresentation,
	"spreadsheet":   EntryTypeSpreadsheet,
	"html":          EntryTypeHtml,
	"markdown":      EntryTypeMarkdown,
	"plain_text":    EntryTypePlainText,
	"archive":       EntryTypeArchive,
	"code":          EntryTypeCode,
	"comment":       EntryTypeComment,
	"other":         EntryTypeOther,
}

// ParseEntryType attempts to convert a string to a EntryType.
func ParseEntryType(name string) (EntryType, error) {
	if x, ok := _EntryTypeValue[name]; ok {
		return x, nil
	}
	return EntryType(""), fmt.Errorf("%s is %w", name, ErrInvalidEntryType)
}

// MarshalText implements the text marshaller method.
func (x EntryType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EntryType) UnmarshalText(text []byte) error {
	tmp, err := ParseEntryType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
